package org.openbase.bco.senact.api;

/*-
 * #%L
 * BCO Senact API
 * %%
 * Copyright (C) 2013 - 2018 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import org.openbase.bco.senact.api.commands.RGBLightCommand;
import java.util.Random;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.bco.senact.api.data.Color;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author <a href="mailto:divine@openbase.org">Divine Threepwood</a>
 */
public class SenactColorChooserPanel extends javax.swing.JPanel {

    protected static final Logger LOGGER = LoggerFactory.getLogger(SenactColorChooserPanel.class);
    
	/**
	 * Creates new form SenactColorChooserPanel
	 */
	public SenactColorChooserPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorChooser = new javax.swing.JColorChooser();
        sendButton = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        randomButton = new javax.swing.JButton();
        fadeButton = new javax.swing.JButton();
        colorDisplayPanel = new javax.swing.JPanel();

        colorChooser.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                colorChooserInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        colorChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                colorChooserPropertyChange(evt);
            }
        });
        colorChooser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                colorChooserAncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        colorChooser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                colorChooserKeyPressed(evt);
            }
        });
        colorChooser.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                colorChooserVetoableChange(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Autosend");

        randomButton.setText("Random");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        fadeButton.setText("FadeColor");
        fadeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fadeButtonActionPerformed(evt);
            }
        });

        colorDisplayPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout colorDisplayPanelLayout = new javax.swing.GroupLayout(colorDisplayPanel);
        colorDisplayPanel.setLayout(colorDisplayPanelLayout);
        colorDisplayPanelLayout.setHorizontalGroup(
            colorDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        colorDisplayPanelLayout.setVerticalGroup(
            colorDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(randomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fadeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(randomButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fadeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
		sendButton.setForeground(Color.BLACK.getAWTColor());
		sendButton.setEnabled(false);
		Color color = new Color(colorChooser.getColor());
		try {
			SenactClientConnection connection = SenactDebugFrame.getServer().getLastSenactConnection();

			if (connection.isConnected()) {
				try {
					connection.sendCommand(new RGBLightCommand(color));
					colorDisplayPanel.setBackground(color.getAWTColor());
					Thread.sleep(20);
				} catch (CouldNotPerformException ex) {
					sendButton.setForeground(Color.RED.getAWTColor());
					LOGGER.warn("Could not change color!", ex);
				}
			} else {
				sendButton.setForeground(Color.YELLOW.getAWTColor());
				LOGGER.warn("No Connection!");
			}
		} catch (Exception ex) {
			LOGGER.warn("Error during send:", ex);
		}
		sendButton.setEnabled(true);
    }//GEN-LAST:event_sendButtonActionPerformed

    private void colorChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_colorChooserPropertyChange
		LOGGER.info("EventcolorChooserPropertyChange:" + evt);
    }//GEN-LAST:event_colorChooserPropertyChange

    private void colorChooserAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_colorChooserAncestorMoved
		LOGGER.info("EventcolorChooserAncestorMoved:" + evt);
    }//GEN-LAST:event_colorChooserAncestorMoved

    private void colorChooserVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_colorChooserVetoableChange
		LOGGER.info("EventcolorChooserVetoableChange:" + evt);
    }//GEN-LAST:event_colorChooserVetoableChange

    private void colorChooserInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_colorChooserInputMethodTextChanged
		LOGGER.info("EventcolorChooserInputMethodTextChanged:" + evt);
    }//GEN-LAST:event_colorChooserInputMethodTextChanged

    private void colorChooserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_colorChooserKeyPressed
		LOGGER.info("EventcolorChooserKeyPressed:" + evt);
    }//GEN-LAST:event_colorChooserKeyPressed

    private void fadeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fadeButtonActionPerformed
		sendButton.setForeground(Color.BLACK.getAWTColor());
		sendButton.setEnabled(false);

		new Thread(new Runnable() {
			@Override
			public void run() {

				RGBLightCommand rgbLightCommand;
				Color color = new Color(colorChooser.getColor());
				float[] hsbvals = Color.RGBtoHSB(color.getRed(), color.getGreen(), color.getBlue(), null);
				int[] hsbvals_int = new int[3];
				hsbvals_int[0] = (int) (255 * hsbvals[0]);
				hsbvals_int[1] = (int) (255 * hsbvals[1]);
				hsbvals_int[2] = (int) (255 * hsbvals[2]);

				try {
					SenactClientConnection connection = SenactDebugFrame.getServer().getLastSenactConnection();

					if (connection.isConnected()) {
						try {
							for (int i = hsbvals_int[2]; i >= 0; i--) {
								hsbvals[2] = i / 255f;
								rgbLightCommand = new RGBLightCommand(new Color(new java.awt.Color(Color.HSBtoRGB(hsbvals[0], hsbvals[1], hsbvals[2]))));
								connection.sendCommand(rgbLightCommand);
								colorDisplayPanel.setBackground(rgbLightCommand.getColor().getAWTColor());
								Thread.sleep(20);
							}
							for (int i = 0; i < hsbvals_int[2]; i++) {
								hsbvals[2] = i / 255f;
								rgbLightCommand = new RGBLightCommand(new Color(new java.awt.Color(Color.HSBtoRGB(hsbvals[0], hsbvals[1], hsbvals[2]))));
								connection.sendCommand(rgbLightCommand);
								colorDisplayPanel.setBackground(rgbLightCommand.getColor().getAWTColor());
								Thread.sleep(20);
							}
						} catch (CouldNotPerformException ex) {
							sendButton.setForeground(Color.RED.getAWTColor());
							LOGGER.warn("Could not change color!", ex);
						}
					} else {
						sendButton.setForeground(Color.YELLOW.getAWTColor());
						LOGGER.warn("No Connection!");
					}
				} catch (Exception ex) {
					LOGGER.warn("Error during send:", ex);
				}
				sendButton.setEnabled(true);
			}
		}).start();
    }//GEN-LAST:event_fadeButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
		sendButton.setForeground(Color.BLACK.getAWTColor());
		sendButton.setEnabled(false);

		new Thread(new Runnable() {
			@Override
			public void run() {
				Color color = new Color(colorChooser.getColor());
				Random random = new Random();
				RGBLightCommand rgbLightCommand;
				try {
					SenactClientConnection connection = SenactDebugFrame.getServer().getLastSenactConnection();

					if (connection.isConnected()) {
						try {
							for (int i = 0; i < 255; i++) {
								rgbLightCommand = new RGBLightCommand(random.nextInt(255), random.nextInt(255), random.nextInt(255));
								colorDisplayPanel.setBackground(rgbLightCommand.getColor().getAWTColor());
								connection.sendCommand(rgbLightCommand);
								Thread.sleep(20);
							}
						} catch (CouldNotPerformException ex) {
							sendButton.setForeground(Color.RED.getAWTColor());
							LOGGER.warn("Could not change color!", ex);
						}
					} else {
						sendButton.setForeground(Color.YELLOW.getAWTColor());
						LOGGER.warn("No Connection!");
					}
				} catch (Exception ex) {
					LOGGER.warn("Error during send:", ex);
				}
				sendButton.setEnabled(true);
			}
		}).start();
    }//GEN-LAST:event_randomButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JPanel colorDisplayPanel;
    private javax.swing.JButton fadeButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JButton randomButton;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
